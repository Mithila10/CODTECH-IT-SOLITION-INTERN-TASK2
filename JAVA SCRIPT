"use strict";

const API_KEY = "YOUR_API_KEY"; // Replace with your actual API key

const dayEl = document.querySelector(".default_day");
const dateEl = document.querySelector(".default_date");
const btnEl = document.querySelector(".btn_search");
const inputEl = document.querySelector(".input_field");

const iconsContainer = document.querySelector(".icons");
const dayInfoEl = document.querySelector(".day_info");
const listContentEl = document.querySelector(".list_content ul");

const days = [
  "Sunday",
  "Monday",
  "Tuesday",
  "Wednesday",
  "Thursday",
  "Friday",
  "Saturday",
];

const currentDate = new Date();
const currentDayName = days[currentDate.getDay()];
dayEl.textContent = currentDayName;
const options = { month: "long", day: "numeric", year: "numeric" };
dateEl.textContent = currentDate.toLocaleDateString("en-US", options);

btnEl.addEventListener("click", (e) => {
  e.preventDefault();

  if (inputEl.value.trim() !== "") {
    const searchQuery = inputEl.value.trim();
    inputEl.value = "";
    findLocation(searchQuery);
  } else {
    console.log("Please enter a city or country name.");
  }
});
async function findLocation(locationName) {
  iconsContainer.innerHTML = "";
  dayInfoEl.innerHTML = "";
  listContentEl.innerHTML = "";

  try {
    const apiUrl = `https://api.openweathermap.org/data/2.5/weather?q=${locationName}&appid=${API_KEY}&units=metric`;
    const response = await fetch(apiUrl);
    const weatherData = await response.json();

    if (weatherData.cod !== "404") {
      const imageContent = displayImageContent(weatherData);
      iconsContainer.insertAdjacentHTML("afterbegin", imageContent);
      iconsContainer.classList.add("fadeIn");
      const rightSideContent = rightSideInfo(weatherData);
      dayInfoEl.insertAdjacentHTML("afterbegin", rightSideContent);
      displayForecast(weatherData.coord.lat, weatherData.coord.lon);
    } else {
      const errorMessage = `<h2 class="weather_temp">${weatherData.cod}</h2>
        <h3 class="cloudtxt">${weatherData.message}</h3>`;
      iconsContainer.insertAdjacentHTML("afterbegin", errorMessage);
    }
  } catch (error) {
    console.error("Error fetching data:", error);
  }
}
function displayImageContent(data) {
  return `<img src="https://openweathermap.org/img/wn/${data.weather[0].icon}.png" alt="Weather Icon" />
    <h2 class="weather_temp">${Math.round(data.main.temp)}°C</h2>
    <h3 class="cloudtxt">${data.weather[0].description}</h3>`;
}
function rightSideInfo(data) {
  return `<div class="content">
          <p class="title">NAME</p>
          <span class="value">${data.name}</span>
        </div>
        <div class="content">
          <p class="title">TEMP</p>
          <span class="value">${Math.round(data.main.temp)}°C</span>
        </div>
        <div class="content">
          <p class="title">HUMIDITY</p>
          <span class="value">${data.main.humidity}%</span>
        </div>
        <div class="content">
          <p class="title">WIND SPEED</p>
          <span class="value">${data.wind.speed} Km/h</span>
        </div>`;
}
async function displayForecast(latitude, longitude) {
  try {
    const forecastUrl = `https://api.openweathermap.org/data/2.5/forecast?lat=${latitude}&lon=${longitude}&appid=${API_KEY}&units=metric`;
    const response = await fetch(forecastUrl);
    const forecastData = await response.json();
    const uniqueForecastDays = [];
    const filteredForecast = forecastData.list.filter((forecast) => {
      const forecastDate = new Date(forecast.dt_txt).getDate();
      if (!uniqueForecastDays.includes(forecastDate)) {
        uniqueForecastDays.push(forecastDate);
        return true;
      }
      return false;
    });

    filteredForecast.slice(0, 4).forEach((forecast) => {
      const forecastHtml = forecastTemplate(forecast);
      listContentEl.insertAdjacentHTML("beforeend", forecastHtml);
    });
  } catch (error) {
    console.error("Error fetching forecast data:", error);
  }
}
function forecastTemplate(forecast) {
  const forecastDate = new Date(forecast.dt_txt);
  const forecastDay = days[forecastDate.getDay()];

  return `<li>
            <img src="https://openweathermap.org/img/wn/${forecast.weather[0].icon}.png" alt="Weather Icon" />
            <span>${forecastDay.slice(0, 3)}</span>
            <span class="day_temp">${Math.round(forecast.main.temp)}°C</span>
          </li>`;
}



   
